## 簡答一、請解釋後端與前端的差異。


## 簡答二、假設我今天去 Google 首頁搜尋框打上：JavaScript 並且按下 Enter，請說出從這一刻開始到我看到搜尋結果為止發生在背後的事情。

### 以抽象概念理解
* 將電腦上的作業系統、電腦的主機、瀏覽器看成是一層一層疊加上去的畫面。
1. google 首頁搜尋時，向 OS 作業系統發出請求。
2. OS 作業系統向硬體端〈實體主機〉發出請求。
3. 實體主機經由網卡發出請求。
4. 到此步驟都算是前端部分，看的到、可操作；前端向後端請求。
5. 向server請求。
6. server 伺服器向資料庫 DB 請求。
7. DB 回應 server。
8. server 回應給網卡。
9. 網卡回應給主機。
10. 實體主機將回應送至 OS 作業系統。
11. OS 作業系統回應給瀏覽器，呈現搜尋結果在網頁上。

![流程圖](https://static.coderbridge.com/img/lyongru/2176098ef403466386ffb18f6f7ed672.png)

## 簡答三、請列舉出 3 個「課程沒有提到」的 command line 指令並且說明功用

### 指令一、 cp -r 複製
`cp -r week1 week1-copy.file`
 將目錄week1 複製一份成 week1-copy.file 目錄名稱，
 一般可用於備份一份檔案，讓我們方便本地測試又不會動到原本好的檔案。
 此處 `-r` 是代表複製目錄，若複製僅檔案，不需要 `-r`。
 補充知識：盡量不要將副檔名取作.cp，雖然同行為了方便常常順手複製成相同檔案名 .cp ，但有鑑於資安考量容易讓人順藤摸瓜，所以養成習慣比較好。

### 指令二、 tail -f /var/log/messages
觀察執行動作後的即時 log 可用到，一有動作便會源源不絕產生，可同時開兩個視窗一邊執行動作、一邊觀察 log 觀察有無異常。

### 指令三、 history
 一般可用於查詢歷史紀錄，或可蒐集歷史操作並轉換成檔案，
 可以是 `history > 20210415-history.txt` ，
 就是將目前為止擷取到的所有歷史操作指令輸出成檔名 20210415-history.txt 的檔案。

### 指令四、 轉向輸出 > < >> << 
 `>` 舉例如同上面寫的 `history > 20210415-history.txt`
 `>>` 若每一次執行 `>` ，會複寫掉上一次的檔案，如果上次的還要保留繼續往後增加，則可以用 `>>`
 舉例： `echo 123 > qq.file`
       `echo 456 >> qq.file`
     那麼 `cat qq.file` 結果就會是 
         123
         456
 `<` 方向相反可以理解成指涉對象相反，
 舉例：`while read LINE ; do cat $LINE done; done <qq` ，
 上方例子為將qq檔案中的內容一行一行列印出來，
 前面例子是 `<` 檔案名稱寫在輸出符號左邊，這邊用在結尾。
 `<<` 轉向附加輸出，以指涉對象相反來理解，可與 `>>` 作對照。
 那麼，如果受限於轉向輸出指令會與數學的大於小於符號讓電腦混淆、或者在權限受到限制時，
 仍需要用到輸出成檔案指令的話，
 可用 tee 結合 pipeline `| tee` ，
 例如： `ls | tee test.txt` 
 此時會將目前目錄下所有內容輸出重新定向到文件 test.txt 中。
